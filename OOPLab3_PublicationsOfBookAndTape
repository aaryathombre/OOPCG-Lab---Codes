/*
EXPERIMENT.NO:3 
TITLE: 
Imagine a publishing company which does marketing for book and audio cassette  versions.  
Create a class publication that stores the title (a string) and price (type float) of  publications.  
From this class derive two classes: book which adds a page count (type int) and  tape which  
adds a playing time in minutes (type float). 
Write a program that instantiates the book and tape class, allows user to enter data  and  
displays the data members. If an exception is caught, replace all the data member  values with  
zero values.
*/

#include <iostream>
#include <string.h>
using namespace std;

class publication {
private:
    string title;
    float price;

public:
    // Default constructor
    publication() {
        title = "______";
        price = 0;
    }

    // Parameterized constructor
    publication(string t, float p) {
        title = t;
        price = p;
    }

    void getdata() {
        cout << "Enter the desired title: ";
        cin >> title;
        cout << "Enter price: ";
        cin >> price;
    }

    void putdata() {
        cout << "Title: " << title << endl;
        cout << "Price: " << price << endl;
    }
};

class book : public publication {
private:
    int pages;

public:
    // Default constructor
    book() {
        pages = 0;
    }

    void getdata() {
        publication::getdata(); // Using the inherited member function
        cout << "Enter no. of pages: ";
        cin >> pages;
    }

    void putdata() {
        publication::putdata();
        try { // Exception handling
            if (pages <= 0) {
                throw pages;
            }
        } catch (int f) {
            cout << "Error: Pages not valid" << endl;
            pages = 0;
        }
        cout << "Pages: " << pages << endl;
    }
};

class tape : public publication {
private:
    float playtime;

public:
    // Default constructor
    tape() {
        playtime = 0;
    }

    void getdata() {
        publication::getdata();
        cout << "Enter the playtime of the tape: ";
        cin >> playtime;
    }

    void putdata() {
        publication::putdata();
        try { // Exception handling
            if (playtime <= 0) {
                throw playtime;
            }
        } catch (float p) {
            cout << "Error: Playtime not valid" << endl;
            playtime = 0;
        }
        cout << "Playtime: " << playtime << endl;
    }
};

int main() {
    book b[10];
    tape t[10];
    int choice = 0;
    int bookcount = 0;
    int tapecount = 0;

    do {
        cout << "1. Add a book\n2. Add a tape\n3. Display book\n4. Display tape\n5. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            cout << "Add book: ";
            b[bookcount].getdata();
            bookcount++;
            break;
        }
        case 2: {
            cout << "Add tape: ";
            t[tapecount].getdata();
            tapecount++;
            break;
        }
        case 3: {
            cout << "Display book: ";
            for (int i = 0; i < bookcount; i++) {
                b[i].putdata();
            }
            break;
        }
        case 4: {
            cout << "Display tape: ";
            for (int i = 0; i < tapecount; i++) {
                t[i].putdata();
            }
            break;
        }
        case 5: {
            cout << "Program executed successfully!" << endl;
            break;
        }
        default: {
            cout << "Invalid choice! Please try again." << endl;
            break;
        }
        }
    } while (choice != 5);

    return 0;
}


/*
OUTPUT: 
/* 
OUTPUT: 
1.Add a book 
2.Add a tape 
3.Display book 
4.Display tape 
5.Exit 
Enter your choice: 1 
Add book: Enter the desired title: Ikigai Enter price : 150 
Enter no. of pages: 100 
1.Add a book 
2.Add a tape 
3.Display book 
4.Display tape 
5.Exit 
Enter your choice: 2 
Add tape: Enter the desired title: tape1 
Enter price : 200 
Enter the playtime of the tape: 20.56 
1.Add a book 
2.Add a tape 
3.Display book 
4.Display tape 
5.Exit 
Enter your choice: 3 
Display book: Title: IkigaiPrice: 150 
Pages: 100
1.Add a book 
2.Add a tape 
3.Display book 
4.Display tape 
5.Exit 
Enter your choice: 4 
Display tape: Title: tape1Price: 200 Playtime : 20.56 
1.Add a book 
2.Add a tape 
3.Display book 
4.Display tape 
5.Exit 
Enter your choice: 5 
Program executed successfully! */

*/
